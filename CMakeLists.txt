cmake_minimum_required(VERSION 3.5)
# set the project name
project(dynamic_overlay)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Needed for SDK
#set(CMAKE_CXX_FLAGS " -Wall -Wextra -s -Os")
#option(BUILD_X509_CERIFICATE_STORE_MOUNT "Mount certificate for F&S Azure updater" ON)

# Set additional header files
set(RAMDISK_HW_CONFIG_STD_PATH /ramdisk_hw_conf)
set(SOURCE_PATH "src")
set(SOURCES
		${SOURCE_PATH}/main.cpp
		${SOURCE_PATH}/mount.h
		${SOURCE_PATH}/mount.cpp
		${SOURCE_PATH}/preinit.h
		${SOURCE_PATH}/preinit.cpp
		${SOURCE_PATH}/u-boot.h
		${SOURCE_PATH}/u-boot.cpp
		${SOURCE_PATH}/dynamic_mounting.h
		${SOURCE_PATH}/dynamic_mounting.cpp
		${SOURCE_PATH}/persistent_mem_detector.h
		${SOURCE_PATH}/persistent_mem_detector.cpp
		${SOURCE_PATH}/create_link.h
		${SOURCE_PATH}/create_link.cpp
		${SOURCE_PATH}/file_properties.h
		${SOURCE_PATH}/file_properties.cpp
      )

if(BUILD_X509_CERIFICATE_STORE_MOUNT)
	set(RAMDISK_CERT_STORE_STD_PATH /ramdisk_cert_store)
	set(TARGET_ARCHIVE_MTD_CERT_STORE ${RAMDISK_CERT_STORE_STD_PATH}/tmp.tar.bz2)

	if(NOT DEFINED TARGET_ARCHIV_DIR_PATH)
		message(FATAL_ERROR "TARGET_ARCHIV_DIR_PATH not defined")
		set(TARGET_ARCHIV_DIR_PATH ${TARGET_ARCHIV_DIR_PATH} CACHE)
	endif()

	if(NOT DEFINED TARGET_ADU_DIR_PATH)
		message(FATAL_ERROR "TARGET_ADU_DIR_PATH not defined")
		set(TARGET_ADU_DIR_PATH ${TARGET_ADU_DIR_PATH} CACHE)
	endif()

	if(NOT DEFINED SOURCE_ARCHIVE_MTD_FILE_PATH)
		message(FATAL_ERROR "SOURCE_ARCHIVE_MTD_FILE_PATH not defined")
		set(SOURCE_ARCHIVE_MTD_FILE_PATH ${SOURCE_ARCHIVE_MTD_FILE_PATH} CACHE)
	endif()

	if(NOT DEFINED SOURCE_ARCHIVE_MMC_FILE_PATH)
		message(FATAL_ERROR "SOURCE_ARCHIVE_MMC_FILE_PATH not defined")
		set(SOURCE_ARCHIVE_MMC_FILE_PATH ${SOURCE_ARCHIVE_MMC_FILE_PATH} CACHE)
	endif()

	if(NOT DEFINED FUS_AZURE_CONFIGURATION)
		message(FATAL_ERROR "FUS_AZURE_CONFIGURATION not defined")
		set(FUS_AZURE_CONFIGURATION ${FUS_AZURE_CONFIGURATION} CACHE)
	endif()

	if(NOT DEFINED FUS_AZURE_CERT_CERTIFICATE_NAME)
		message(FATAL_ERROR "FUS_AZURE_CERT_CERTIFICATE_NAME not defined")
		set(FUS_AZURE_CERT_CERTIFICATE_NAME ${FUS_AZURE_CERT_CERTIFICATE_NAME} CACHE)
	endif()

	if(NOT DEFINED FUS_AZURE_CERT_KEY_NAME)
		message(FATAL_ERROR "FUS_AZURE_CERT_KEY_NAME not defined")
		set(FUS_AZURE_CERT_KEY_NAME ${FUS_AZURE_CERT_KEY_NAME} CACHE)
	endif()

	set(SOURCES
			${SOURCES}
			${SOURCE_PATH}/x509_cert_store.h
			${SOURCE_PATH}/x509_cert_store.cpp
		)
endif()

add_executable(dynamic_overlay ${SOURCES})

if(NOT DEFINED RAUC_SYSTEM_CONF_PATH)
	message(FATAL_ERROR "RAUC_SYSTEM_CONF_PATH not defined")
	set(RAUC_SYSTEM_CONF_PATH ${RAUC_SYSTEM_CONF_PATH} CACHE)
endif()

if(NOT DEFINED NAND_RAUC_SYSTEM_CONF_PATH)
	message(FATAL_ERROR "NAND_RAUC_SYSTEM_CONF_PATH not defined")
	set(NAND_RAUC_SYSTEM_CONF_PATH ${NAND_RAUC_SYSTEM_CONF_PATH} CACHE)
endif()

if(NOT DEFINED EMMC_RAUC_SYSTEM_CONF_PATH)
	message(FATAL_ERROR "EMMC_RAUC_SYSTEM_CONF_PATH not defined")
	set(EMMC_RAUC_SYSTEM_CONF_PATH ${EMMC_RAUC_SYSTEM_CONF_PATH} CACHE)
endif()

if(NOT DEFINED UBOOT_ENV_PATH)
	message(FATAL_ERROR "UBOOT_ENV_PATH not defined")
	set(UBOOT_ENV_PATH ${UBOOT_ENV_PATH} CACHE)
endif()

if(NOT DEFINED EMMC_UBOOT_ENV_PATH)
	message(FATAL_ERROR "EMMC_UBOOT_ENV_PATH not defined")
	set(EMMC_UBOOT_ENV_PATH ${EMMC_UBOOT_ENV_PATH} CACHE)
endif()

if(NOT DEFINED NAND_UBOOT_ENV_PATH)
	message(FATAL_ERROR "NAND_UBOOT_ENV_PATH not defined")
	set(NAND_UBOOT_ENV_PATH ${NAND_UBOOT_ENV_PATH} CACHE)
endif()

if(BUILD_X509_CERIFICATE_STORE_MOUNT)
	target_compile_definitions(dynamic_overlay PUBLIC
		BUILD_X509_CERIFICATE_STORE_MOUNT="${BUILD_X509_CERIFICATE_STORE_MOUNT}"
		TARGET_ARCHIV_DIR_PATH="${TARGET_ARCHIV_DIR_PATH}"
		TARGET_ADU_DIR_PATH="${TARGET_ADU_DIR_PATH}"
		RAMFS_CERT_STORE_MOUNTPOINT="${RAMDISK_CERT_STORE_STD_PATH}"
		SOURCE_ARCHIVE_MTD_FILE_PATH="${SOURCE_ARCHIVE_MTD_FILE_PATH}"
		SOURCE_ARCHIVE_MMC_FILE_PATH="${SOURCE_ARCHIVE_MMC_FILE_PATH}"
		FUS_AZURE_CONFIGURATION="${FUS_AZURE_CONFIGURATION}"
		FUS_AZURE_CERT_CERTIFICATE_NAME="${FUS_AZURE_CERT_CERTIFICATE_NAME}"
		FUS_AZURE_CERT_KEY_NAME="${FUS_AZURE_CERT_KEY_NAME}"
		TARGET_ARCHIVE_MTD_CERT_STORE="${TARGET_ARCHIVE_MTD_CERT_STORE}"
	)
endif()

target_compile_definitions(dynamic_overlay PUBLIC
	RAMFS_HW_CONFIG_MOUNTPOINT="${RAMDISK_HW_CONFIG_STD_PATH}"
	RAUC_SYSTEM_CONF_PATH="${RAUC_SYSTEM_CONF_PATH}"
	NAND_RAUC_SYSTEM_CONF_PATH="${NAND_RAUC_SYSTEM_CONF_PATH}"
	EMMC_RAUC_SYSTEM_CONF_PATH="${EMMC_RAUC_SYSTEM_CONF_PATH}"
	UBOOT_ENV_PATH="${UBOOT_ENV_PATH}"
	NAND_UBOOT_ENV_PATH="${NAND_UBOOT_ENV_PATH}"
	EMMC_UBOOT_ENV_PATH="${EMMC_UBOOT_ENV_PATH}"
  )

find_library(inicpp_lib NAMES libinicpp.a libinicpp.so)
find_library(ubootenv_lib NAMES libubootenv.a libubootenv.so)
find_library(z_lib NAMES lbiz.a libz.so)
find_library(jsoncpp_lib NAMES libjsoncpp_static.a libjsoncpp.so)

if(BUILD_X509_CERIFICATE_STORE_MOUNT)
	find_library(libjsoncpp NAMES libjsoncpp_static.a)
endif(BUILD_X509_CERIFICATE_STORE_MOUNT)

message("Path to library inicpp: ${inicpp_lib}")
message("Path to library ubootenv: ${ubootenv_lib}")
message("Path to library zlib: ${z_lib}")
message("Path to library jsoncpp: ${jsoncpp_lib}")


target_link_libraries(dynamic_overlay
	${inicpp_lib}
	${ubootenv_lib}
	${z_lib}
	${jsoncpp_lib}
  )

install(TARGETS dynamic_overlay RUNTIME DESTINATION /sbin)
install(DIRECTORY DESTINATION ${RAMDISK_HW_CONFIG_STD_PATH})
if(BUILD_X509_CERIFICATE_STORE_MOUNT)
	install(DIRECTORY DESTINATION ${RAMDISK_CERT_STORE_STD_PATH})
endif()